# %% [markdown]

# create ants test data from test run (20220420)
# starting data were generated by fly_builder.py 
# with voxel size in microns and xyz units in mm (which is incorrect)

# %%
import nibabel as nib
import numpy as np
import os
basedir = '/Users/poldrack/data_unsynced/brainsss/ants_example_data'

# %%
def compare_zooms(img1, img2):
    z1 = img1.header.get_zooms()[:3]
    z2 = img2.header.get_zooms()[:3]
    if np.allclose(z1, z2):
        return(True)
    else:
        return(False)

def affines_vs_zooms(img):
    sform = img.header.get_sform()
    qform = img.header.get_qform()
    zooms = img.header.get_zooms()[:3]
    qform_match = np.allclose(np.diag(qform)[:3], zooms[:3])
    sform_match = np.allclose(np.diag(sform)[:3], zooms[:3])
    return qform_match and sform_match


def get_pixdim_units(img):
    """use the actual values of zooms to determine
    whether units are specified in mm or microns"""
    zooms = np.array(img.header.get_zooms()[:3])
    if all(zooms >= 1):
        return('um')
    else:
        return('mm')

def get_filenames(size, units, basedir):
    assert size in ['um', 'mm'], 'size must be um or mm'
    assert units in ['um', 'mm'], 'units must be um or mm'

    fname = os.path.join(
        basedir, 
        f'series-tdtomato_size-{size}_units-{units}.nii')
    meanfname = fname.replace('.nii', '_mean.nii')
    return(fname, meanfname)

# %%
# for each variable, the first term in the name
# is the units of the pixel dimensions in the zooms/affines,
# and the second is the setting of xyz units in the header
#
# these are the data generated by flybuilder
# they (incorrectly) have pixdim values specified in microns
# but xyz units are set to mm
um_mm_imgfile, um_mm_meanfile = get_filenames(
    'um', 'mm', basedir)
um_mm_img = nib.load(um_mm_imgfile)
um_mm_mean_img = nib.load(um_mm_meanfile)

# %%

# %%
# confirm that zooms and affines are correct
assert compare_zooms(um_mm_img, um_mm_mean_img)

assert affines_vs_zooms(um_mm_img)

assert affines_vs_zooms(um_mm_mean_img)

assert get_pixdim_units(um_mm_img) == 'um'
assert get_pixdim_units(um_mm_mean_img) == 'um'

assert um_mm_img.header.get_xyzt_units()[0] == 'mm'
assert um_mm_mean_img.header.get_xyzt_units()[0] == 'mm'

# %% [markdown]
# Now we generate the other images
# first, generate um_micron
# this one has pixdim specified in micron units
# and xyz units set to micron, which are correct
# values for each

# %%
um_um_img = nib.Nifti1Image(
    um_mm_img.get_fdata(),
    um_mm_img.affine,
    um_mm_img.header
)
um_um_mean_img = nib.Nifti1Image(
    um_mm_mean_img.get_fdata(),
    um_mm_mean_img.affine,
    um_mm_mean_img.header
)

# set xyz units to microns
um_um_img.header.set_xyzt_units(xyz=3)
um_um_mean_img.header.set_xyzt_units(xyz=3)

um_um_imgfile, um_um_mean_imgfile = get_filenames(
    'um', 'um', basedir)

um_um_img.to_filename(um_um_imgfile)
um_um_mean_img.to_filename(um_um_mean_imgfile)



# %%
# next generate mm_mm

mm_mm_img = nib.Nifti1Image(
    um_mm_img.get_fdata(),
    um_mm_img.affine,
    um_mm_img.header
)
mm_mm_mean_img = nib.Nifti1Image(
    um_mm_mean_img.get_fdata(),
    um_mm_mean_img.affine,
    um_mm_mean_img.header
)

affine = mm_mm_img.get_qform()
pixdim = np.array(mm_mm_img.header.get_zooms()[:3])/1000
affine[:3,:3] = np.diag(pixdim)

mm_mm_img.set_qform(affine)
mm_mm_img.set_sform(affine)
mm_mm_mean_img.set_qform(affine)
mm_mm_mean_img.set_sform(affine)

assert get_pixdim_units(mm_mm_img) == 'mm'
assert get_pixdim_units(mm_mm_mean_img) == 'mm'

assert mm_mm_img.header.get_xyzt_units()[0] == 'mm'
assert mm_mm_mean_img.header.get_xyzt_units()[0] == 'mm'

mm_mm_imgfile, mm_mm_mean_imgfile = get_filenames(
    'mm', 'mm', basedir)

mm_mm_img.to_filename(mm_mm_imgfile)
mm_mm_mean_img.to_filename(mm_mm_mean_imgfile)

# %%
